plugins {
	id 'java'
	id 'org.springframework.boot' version '3.2.3'
	id 'io.spring.dependency-management' version '1.1.4'
}

group = 'com.seroter'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
}

repositories {
	mavenCentral()
	maven { url = uri("https://repo.spring.io/snapshot") }
}

bootJar {
	duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

ext {
	querydslVersion = "5.1.0"
	lombokVersion = "1.18.28"
	mybatisVersion = "3.0.4"
	jwtVersion = "0.12.6"
	guavaVersion = "31.1-jre"
}

dependencies {
	// Lombok
	compileOnly 'org.projectlombok:lombok:1.18.28'
	annotationProcessor 'org.projectlombok:lombok:1.18.28'
	implementation 'net.coobird:thumbnailator:0.4.20'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
	implementation 'org.springframework.boot:spring-boot-starter-oauth2-client'
	implementation 'org.springframework.boot:spring-boot-starter-security'
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-webflux'
	
	// Log4j2 설정
	implementation 'org.springframework.boot:spring-boot-starter-log4j2'
	configurations {
		all*.exclude group: 'org.springframework.boot', module: 'spring-boot-starter-logging'
	}

	// Database
	implementation "org.mybatis.spring.boot:mybatis-spring-boot-starter:${mybatisVersion}"
	runtimeOnly 'org.mariadb.jdbc:mariadb-java-client'

	// Querydsl
	implementation "com.querydsl:querydsl-jpa:${querydslVersion}:jakarta"
	annotationProcessor "com.querydsl:querydsl-apt:${querydslVersion}:jakarta"
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

	// JWT
	implementation "io.jsonwebtoken:jjwt-api:${jwtVersion}"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:${jwtVersion}"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jwtVersion}"
	implementation "io.jsonwebtoken:jjwt-gson:${jwtVersion}"

	// Lombok
	compileOnly "org.projectlombok:lombok:${lombokVersion}"
	annotationProcessor "org.projectlombok:lombok:${lombokVersion}"

	// Caching
	implementation "com.google.guava:guava:${guavaVersion}"

	// Image Processing
	implementation 'net.coobird:thumbnailator:0.4.20'

	// Development Tools
	developmentOnly 'org.springframework.boot:spring-boot-devtools'

	// Test Dependencies
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation "org.mybatis.spring.boot:mybatis-spring-boot-starter-test:${mybatisVersion}"
	testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

	// Caffeine 캐시 의존성
	implementation 'com.github.ben-manes.caffeine:caffeine'
	implementation 'org.springframework.boot:spring-boot-starter-cache'

	// Swagger
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
}

// Querydsl Q클래스 생성 경로 설정
def querydslDir = file("src/main/generated")

sourceSets {
	main {
		java {
			srcDirs += querydslDir
		}
	}
}

tasks.named('compileJava') {
	options.annotationProcessorGeneratedSourcesDirectory = querydslDir
}

// clean 시 Q클래스 디렉터리 삭제
clean {
	delete querydslDir
}

tasks.named('test') {
	useJUnitPlatform()
}